#!/usr/bin/env node

const argv = require('minimist')(process.argv);
const net = require('net');
const through = require('through2');

let serverBuffer = Buffer([]);
let handshakeReceived = false;

const dec2bin = (dec) => (dec >>> 0).toString(2);


function printChunk(blockName, chunk) {
  for (byte of chunk.values()) {
    if (!handshakeReceived) {
      serverBuffer = Buffer.concat([serverBuffer, new Buffer([byte])]);

      if (serverBuffer.toString().match(/.\r\n\r\n$/)) handshakeReceived = true;
    } else {
      process.stdout.write(new Buffer([byte]).toString('hex'));
    }

    //const str = (new Buffer([byte])).toString('hex');

    //if (str.match(/[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/\? ]{1}/)) {
    // process.stdout.write(dec2bin(byte));
    //} else {
    //  process.stdout.write(`\\${Number(byte)}`);
    //}
  }
}

function printString(blockName) {
  return through(function (chunk, enc, callback) {
    printChunk(blockName, chunk);
    this.push(chunk);
    callback();
  })
}


net.createServer((socket) => {
  const proxy = new net.Socket();

  proxy.connect({host: argv.hostname || '127.0.0.1', port: argv.hostport});

  socket
    //.pipe(printString('client'))
    .pipe(proxy);

  proxy
    .pipe(printString('server'))
    .pipe(socket);


}).listen(argv.p);